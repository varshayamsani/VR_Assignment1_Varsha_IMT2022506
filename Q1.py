# -*- coding: utf-8 -*-
"""Q1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vaSs9Zoit4nHfZS6BAshzIzNuOXib6Nx
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os

def detect_coins(image_path):
    # convert image to grayscale
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur for noise reduction
    blurred = cv2.GaussianBlur(gray, (15, 15), 7)
    # blurred = cv2.medianBlur(gray, 15)

    # Display the original image
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title("Original Image")
    plt.show()

    # Thresholding using Otsu's method
    _, binary = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # Morphological operations to enhance object detection
    kernel = np.ones((3, 3), np.uint8)
    binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel, iterations=2)

    # Edge detection
    edges = cv2.Canny(binary, 150, 250)
    # increasing the thickness of the edges
    kernel = np.ones((3,3), np.uint8)
    edges = cv2.dilate(edges, kernel, iterations=1)
    plt.imshow(edges, cmap='gray')
    plt.title("Edge detection of coins")
    plt.show()
    cv2.imwrite(os.path.join(output_folder, "edge_detection.jpg"), edges)


    # Find contours for segmentation
    contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    segmented = np.zeros_like(gray)
    cv2.drawContours(segmented, contours, -1, 255, thickness=cv2.FILLED)

    plt.imshow(segmented, cmap='gray')
    plt.title("Segmentation of coins")
    plt.show()
    cv2.imwrite(os.path.join(output_folder, "segmentation.jpg"), segmented)


    return contours, img

def count_coins(contours, img):
    # Filter out small noise
    min_area = 10000
    valid_contours = [c for c in contours if cv2.contourArea(c) > min_area]

    # Draw detected contours on the image
    output = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    cv2.drawContours(output, valid_contours, -1, (0, 255, 0), thickness=2)

    plt.imshow(output)
    plt.title(f"Total Coins Detected: {len(valid_contours)}")
    plt.show()
    cv2.imwrite(os.path.join(output_folder, "detected_coins.jpg"), cv2.cvtColor(output, cv2.COLOR_RGB2BGR))


    return len(valid_contours)

image_path = "img5.jpg"
output_folder = "Q1outputs"
contours, img = detect_coins(image_path)
num_coins = count_coins(contours, img)

print("Number of coins detected:", num_coins)